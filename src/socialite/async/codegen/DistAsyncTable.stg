import "Utils.stg"
DistAsyncTable(name, dynamic, keyType, valueType, deltaType, aggrType, weightType, extraType, expr) ::= <<
package socialite.async.codegen;
<importForDistTable()>
//algorithm <name>
public class DistAsyncTable extends BaseDistAsyncTable{
    private static final Log L = LogFactory.getLog(DistAsyncTable.class);
    private volatile int size;
    <!只有静态且key为int才可以keyAsIndex!>
    <if(dynamic || !IsKeyAsIndex.(keyType))>
        private <KeyIndMap.(keyType)> keyIndMap;
        private <IndKeyMap.(keyType)> indKeyMap; //using in iterate method
    <endif>

    <if(dynamic)>
        private <PrimitiveObjectMap.(keyType)>\<<PrimitiveMap.(keyType)>\> srcDstListMap;
        <if(weightType)>private <PrimitiveObjectMap.(keyType)>\<<PrimitiveMap.(weightType)>\> srcWeightListMap;<endif>
    <endif>


    private <PrimitiveMap.(valueType)> valueList;
    private List\<<TypeAtomicMap.(deltaType)>\> deltaList;
    private List\<<if(IsPairKey.(keyType))>List\<Pair><else><PrimitiveMap.(keyType)><endif>\> adjacenciesList; //除了key为int类型的装ind，该字段装邻接点数据
    <if(!IsBoolean.(valueType))> <!暂时忽略2-step程序的weight和extra!>
        <!optional dependent on algorithms!>
        <if(weightType)>private List\<<PrimitiveMap.(weightType)>\> weightsList;<endif>
        <if(extraType)>private <PrimitiveMap.(extraType)> extraList;<endif>
    <endif>
    <if(IsBoolean.(valueType))>private List\<Boolean> sentFlagList;<endif>

    private int base;

    <if(IsInt.(deltaType))>
    public static final <deltaType> IDENTITY_ELEMENT = <IntegerIdentityElement.(aggrType)>;
    <elseif(IsLong.(deltaType))>
    public static final <deltaType> IDENTITY_ELEMENT = <LongIdentityElement.(aggrType)>;
    <elseif(IsFloat.(deltaType))>
    public static final <deltaType> IDENTITY_ELEMENT = <FloatIdentityElement.(aggrType)>;
    <elseif(IsDouble.(deltaType))>
    public static final <deltaType> IDENTITY_ELEMENT = <DoubleIdentityElement.(aggrType)>;
    <endif>


    public DistAsyncTable(Class\<?> messageTableClass, DistTableSliceMap sliceMap, int indexForTableId, int[] myIdxWorkerIdMap) {
        super(messageTableClass, sliceMap, indexForTableId, myIdxWorkerIdMap);


        <if(dynamic || !IsKeyAsIndex.(keyType))>
            keyIndMap = new <KeyIndMap.(keyType)>(initSize);
            indKeyMap = new <IndKeyMap.(keyType)>(initSize); //using in iterate method
        <endif>

        <if(dynamic)>
            srcDstListMap = new <PrimitiveObjectMap.(keyType)>\<>(initSize);
            <if(weightType)>srcWeightListMap = new <PrimitiveObjectMap.(keyType)>\<>(initSize);<endif>
        <endif>

       valueList = new <PrimitiveMap.(valueType)>(initSize);
       deltaList = new ArrayList\<>(initSize);
       adjacenciesList = new ArrayList\<>(initSize);
       <if(!IsBoolean.(valueType))>
           <if(weightType)> weightsList = new ArrayList\<>(initSize);<endif>
           <if(extraType)> extraList = new <PrimitiveMap.(extraType)>(initSize);<endif>
       <endif>
       <if(IsBoolean.(valueType))>sentFlagList = new ArrayList\<>();<endif>
    }

    public DistAsyncTable(Class\<?> messageTableClass, DistTableSliceMap sliceMap, int indexForTableId, int[] myIdxWorkerIdMap, int base) {
        this(messageTableClass, sliceMap, indexForTableId, myIdxWorkerIdMap);
        this.base = base;
    }

    @Override
    public true updateLockFree(int localInd) {
       <if(IsBoolean.(valueType))>
            if (sentFlagList.get(localInd)){
                return false;
            }
            <deltaType> oldDelta = deltaList.get(localInd).get();
            if (eval(oldDelta))
                valueList.set(localInd, true);
            if (!valueList.get(localInd)){
                return false;
            }
            <PrimitiveMap.(keyType)> adjacencies = adjacenciesList.get(localInd);
            if(adjacencies!=null){
                <! 遍历每个邻接点 !>
                for(int i = 0; i \< adjacencies.size(); i++){
                    <keyType> adjacency = adjacencies.get(i);
                    if(sliceMap.isLocal(indexForTableId, adjacency)){
                        int adjacentLocalInd;
                        synchronized(keyIndMap) {
                            if(keyIndMap.contains(adjacency))
                                adjacentLocalInd = keyIndMap.get(adjacency);
                            else {
                                adjacentLocalInd = addEntry(adjacency, false, IDENTITY_ELEMENT);
                            }
                        }
                        <! OTHER AGGREGATE FUNCTIONS IS NOT SUPPORTED !>
                        <if(IsCount.(aggrType))>deltaList.get(adjacentLocalInd).addAndGet(1);<endif>
                    } else {
                        int belongToWorkerId = myIdxWorkerIdMap[sliceMap.machineIndexFor(indexForTableId, adjacency)];
                        MessageTable messageTable = (MessageTable)getWritableMessageTable(belongToWorkerId);
                        messageTable.apply(adjacency);
                    }
                }
            }
            sentFlagList.set(localInd, true);
        <else>
            <deltaType> oldDelta = deltaList.get(localInd).getAndSet(IDENTITY_ELEMENT);
            if(oldDelta == IDENTITY_ELEMENT)
                return false;

            //keyType: <keyType> aggrType: <aggrType> weightType:<weightType> extraType: <extraType>
            <valueType> accumulatedValue = <WrappedTypeMap.(valueType)>.<AggrTypeFuncMap.(aggrType)>(valueList.get(localInd), oldDelta);
            <! 聚集后比原来还小，则不更新 !>
            <if(IsMax.(aggrType))>if(accumulatedValue \<= valueList.get(localInd))return false;
            <elseif(IsMin.(aggrType))>if(accumulatedValue >= valueList.get(localInd))return false;<endif>
            //更新value
            valueList.set(localInd, accumulatedValue);

            <!Count函数在不准与extra、weight同用，因为语义不明!>
            <if(!IsCount.(aggrType))>
                <! 有权值 !>
                <if(weightType)><PrimitiveMap.(weightType)> weights = weightsList.get(localInd);<endif>
                <! 有附加值，如图的degree !>
                <if(extraType)><extraType> extra = extraList.get(localInd);<endif>
            <endif>

            <if(IsPairKey.(keyType))>List\<Pair><else><PrimitiveMap.(keyType)><endif> adjacencies = adjacenciesList.get(localInd);
            <! 遍历每个邻接点 !>
            if(adjacencies == null) return true;
            for(int i = 0; i \< adjacencies.size(); i++){
                <if(!IsCount.(aggrType))>
                <valueType> newDelta = eval(oldDelta <if(weightType)>, weights.get(i)<endif> <if(extraType)>, extra<endif>);
                <endif>
                <keyType> adjacency = adjacencies.get(i);
                if(sliceMap.isLocal(indexForTableId, <if(IsPairKey.(keyType))>adjacency.getV0()<else>adjacency<endif>)) {
                       int adjacentLocalInd;
                        <!when use int as key, use key as index!>
                        <if(dynamic || !IsKeyAsIndex.(keyType))>
                            synchronized(keyIndMap){
                                if(keyIndMap.contains(adjacency))
                                    adjacentLocalInd = keyIndMap.get(adjacency);
                                else {
                                    <if(IsPairKey.(keyType))>
                                    adjacentLocalInd = addEntry(adjacency.getV0(), adjacency.getV1(), IDENTITY_ELEMENT, IDENTITY_ELEMENT);
                                    <elseif(IsBoolean.(valueType))>
                                    adjacentLocalInd = addEntry(adjacency, false, IDENTITY_ELEMENT);
                                    <else>
                                    adjacentLocalInd = addEntry(adjacency, IDENTITY_ELEMENT, IDENTITY_ELEMENT);
                                    <endif>
                                }
                            }
                        <else>
                            adjacentLocalInd = adjacency - base; //key as index
                        <endif>

                        <if(IsSum.(aggrType))>deltaList.get(adjacentLocalInd).addAndGet(newDelta);<endif>
                        <if(IsMax.(aggrType))>deltaList.get(adjacentLocalInd).accumulateAndGet(newDelta, Math::max);<endif>
                        <if(IsMin.(aggrType))>deltaList.get(adjacentLocalInd).accumulateAndGet(newDelta, Math::min);<endif>
                        <if(IsCount.(aggrType))>deltaList.get(adjacentLocalInd).addAndGet(1);<endif>
                } else {
                    <if(IsPairKey.(keyType))>
                    int belongToWorkerId = myIdxWorkerIdMap[sliceMap.machineIndexFor(indexForTableId, adjacency.getV0())];
                    <else>
                    int belongToWorkerId = myIdxWorkerIdMap[sliceMap.machineIndexFor(indexForTableId, adjacency)];
                    <endif>
                    MessageTable messageTable = (MessageTable)getWritableMessageTable(belongToWorkerId);
                    messageTable.apply(adjacency<if(!IsCount.(aggrType))>, newDelta<endif>);
                }
            }
        <endif>
        return false;
    }

    @Override
    public void applyBuffer(MessageTableBase messageTable) {
        messageTable.get<WrappedTypeMap.(keyType)><WrappedTypeMap.(deltaType)>Map().forEach((key, delta) -> {
            int adjacentLocalInd;
            <if(dynamic || !IsKeyAsIndex.(keyType))>
                synchronized(keyIndMap){
                    if(keyIndMap.contains(key))
                        adjacentLocalInd = keyIndMap.get(key);
                    else {
                        <if(IsPairKey.(keyType))>
                        adjacentLocalInd = addEntry(key.getV0(), key.getV1(), IDENTITY_ELEMENT, IDENTITY_ELEMENT);
                        <else>
                        adjacentLocalInd = addEntry(key, <if(IsBoolean.(valueType))>false<else>IDENTITY_ELEMENT<endif>, IDENTITY_ELEMENT);
                        <endif>
                    }
                }
            <else>
                adjacentLocalInd = key - base; //key as Index
            <endif>
            <if(IsSum.(aggrType))>deltaList.get(adjacentLocalInd).addAndGet(delta.get());<endif>
            <if(IsMax.(aggrType))>deltaList.get(adjacentLocalInd).accumulateAndGet(delta.get(), Math::max);<endif>
            <if(IsMin.(aggrType))>deltaList.get(adjacentLocalInd).accumulateAndGet(delta.get(), Math::min);<endif>
            <if(IsCount.(aggrType))>deltaList.get(adjacentLocalInd).addAndGet(delta.get());<endif>
        });
    }

    <if(IsBoolean.(valueType))>
    private boolean eval(<deltaType> oldDelta) {
        return (<expr>);
    }
    <else>
    private <deltaType> eval(<deltaType> oldDelta <if(weightType)>,<weightType> weight<endif> <if(extraType)>, <extraType> extra<endif>) {
        return (<deltaType>)(<expr>);
    }
    <endif>

    <if(dynamic)>
    private synchronized int addEntry(<if(IsPairKey.(keyType))>int col1OfKey, int col2OfKey<else><keyType> key<endif>, <valueType> value, <deltaType> delta){
        <if(IsPairKey.(keyType))>Pair key = new Pair(col1OfKey, col2OfKey);<endif>
        keyIndMap.put(key, size);
        indKeyMap.put(size, key);
        valueList.add(value);
        deltaList.add(new <TypeAtomicMap.(deltaType)>(delta));
        adjacenciesList.add(join(<if(IsPairKey.(keyType))>col1OfKey, col2OfKey<else>key<endif>));
        <if(weightType)>
        weightsList.add(srcWeightListMap.get(key));
        <endif>
        <if(IsBoolean.(valueType))>sentFlagList.add(false);<endif>
        return size++;
    }

    private synchronized <if(IsPairKey.(keyType))>List\<Pair><else><PrimitiveMap.(keyType)><endif> join(<if(IsPairKey.(keyType))>int col1OfKey, int col2OfKey<else><keyType> key<endif>){
        <if(IsPairKey.(keyType))>
            <PrimitiveMap.(keyType)> dstList = srcDstListMap.get(col1OfKey);
            if(dstList==null) return null;
            List\<Pair> adjacencies = new ArrayList\<>();
            for(int i=0;i\<dstList.size();i++){
                Pair pair = new Pair(dstList.get(i), col2OfKey);
                adjacencies.add(pair);
            }
            return adjacencies;
        <else>
            return srcDstListMap.get(key);
        <endif>
    }
    <endif>

    @Override
    public MyVisitorImpl getInitVisitor(){
        return new MyVisitorImpl(){
            <if(dynamic)>
                <if(IsPairKey.(keyType))>
                    int col1OfKey;
                    @Override
                    public boolean visit_0(int col1OfKey){
                        this.col1OfKey = col1OfKey;
                        return true;
                    }

                    @Override
                    public boolean visit(int col2OfKey, <valueType> delta) {
                        addEntry(col1OfKey, col2OfKey, IDENTITY_ELEMENT, delta);
                        return true;
                    }
                <elseif(IsBoolean.(valueType))>
                    @Override
                    public boolean visit(<keyType> key){
                        addEntry(key, true, IDENTITY_ELEMENT);
                        return true;
                    }
                <else>
                    @Override
                    public boolean visit(<keyType> key, <valueType> delta){
                        addEntry(key, IDENTITY_ELEMENT, delta);
                        return true;
                    }
                <endif>
            <else>
                <PrimitiveMap.(keyType)> adjacencies;
                <if(weightType)><PrimitiveMap.(weightType)> weights;<endif>
                @Override
                public boolean visit_0_1<if(extraType)>_2<endif>(<keyType> key, <deltaType> delta <if(extraType)>, <extraType> extra<endif>){
                    valueList.add(IDENTITY_ELEMENT);
                    deltaList.add(new <TypeAtomicMap.(deltaType)>(delta));
                    adjacencies = new <PrimitiveMap.(keyType)>();
                    adjacenciesList.add(adjacencies);
                    <if(extraType)>extraList.add(extra);<endif>
                    <if(weightType)>
                    weights = new <PrimitiveMap.(weightType)>();
                    weightsList.add(weights);
                    <endif>
                    size++;
                    return true;
                }

                @Override
                public boolean visit(<keyType> adjacency <if(weightType)>, <weightType> weight<endif>){
                    adjacencies.add(adjacency);
                    <if(weightType)>weights.add(weight);<endif>
                    return true;
                }
            <endif>
        };
    }

    <if(dynamic)>
    @Override
    public MyVisitorImpl getEdgeVisitor(){
        return new MyVisitorImpl() {
            <PrimitiveMap.(keyType)> dstList;
            <if(weightType)><PrimitiveMap.(weightType)> weightList;<endif>
            @Override
            public boolean visit_0(<if(IsPairKey.(keyType))>int<else><keyType><endif> key) {
                dstList = new <PrimitiveMap.(keyType)>();
                srcDstListMap.put(key, dstList);
                <if(weightType)>
                weightList = new <PrimitiveMap.(weightType)>();
                srcWeightListMap.put(key, weightList);
                <endif>
                return true;
            }

            @Override
            public boolean visit(<if(IsPairKey.(keyType))>int<else><keyType><endif> dst <if(weightType)>,<weightType> weight<endif>) {
                dstList.add(dst);
                <if(weightType)>weightList.add(weight);<endif>
                return true;
            }
        };
    }
    <endif>

    @Override
    <if(IsBoolean.(valueType))>
    public double accumulateValue(){
        double sum = 0;
        for(int i=0;i\<size;i++)
            if(valueList.get(i) && !sentFlagList.get(i)){ //可见性问题，只能这么解决
                sum++;
            }
        return sum;
    }
    <else>
    public double accumulateValue(){
        double sum = 0;

        for(int i=0;i\<size;i++){
            <valueType> value = valueList.get(i);
            if(value != IDENTITY_ELEMENT){
                sum+=value;
            }
        }
        return sum;
    }
    <endif>

    @Override
    public double accumulateDelta(){
        double sum = 0;

        for(int i=0;i\<size;i++){
            <deltaType> delta = deltaList.get(i).<deltaType>Value();
            if(delta != IDENTITY_ELEMENT){
                sum+=delta;
            }
        }
        return sum;
    }

    @Override
    public double getValue(int localInd) {
        <if(IsBoolean.(valueType))>
            throw new UnsupportedOperationException();
        <else>
            return valueList.get(localInd);
        <endif>
    }

    @Override
    public double getDelta(int localInd) {
        return (double)deltaList.get(localInd).get();
    }

    @Override
	public void iterate(MyVisitorImpl visitor) {
		for (int i=0; i\<size; i++) {
	        <if(dynamic || !IsKeyAsIndex.(keyType))>
                <if(IsPairKey.(keyType))>
                    Pair pair = indKeyMap.get(i);
                    <! reverse key to print right answer !>
                    if (!visitor.visit(pair.toReversedString(), valueList.get(i), deltaList.get(i).<deltaType>Value()))
                        break;
                <elseif(IsBoolean.(valueType))>
                    if(valueList.get(i))
                        if (!visitor.visit(indKeyMap.get(i)))
                            break;
                <else>
                    if(!visitor.visit(indKeyMap.get(i), valueList.get(i), deltaList.get(i).<deltaType>Value()))
                        break;
                <endif>
            <else>
                if (!visitor.visit(i + base, valueList.get(i), deltaList.get(i).<deltaType>Value()))
                    break;
		    <endif>
		}
	}

    @Override
	public void iterateTuple(QueryVisitor queryVisitor){
	    Tuple tuple;
	    for (int i=0; i\<size; i++) {
            <if(dynamic || !IsKeyAsIndex.(keyType))>
                <if(IsPairKey.(keyType))>
                    Pair pair = indKeyMap.get(i);
                    tuple = new Tuple_Object_<valueType>_<deltaType>();
                    tuple.set<WrappedTypeForTupleMap.(keyType)>(0, pair.toReversedString());<! reverse key to print right answer !>
                    tuple.set<WrappedTypeForTupleMap.(valueType)>(1, valueList.get(i));
                    tuple.set<WrappedTypeForTupleMap.(deltaType)>(2, deltaList.get(i).get());
                    if(!queryVisitor.visit(tuple))
                        break;
                <elseif(IsBoolean.(valueType))>
                    if(valueList.get(i)){
                        tuple = new Tuple_<keyType>();
                        tuple.set<WrappedTypeForTupleMap.(keyType)>(0, indKeyMap.get(i));
                        if(!queryVisitor.visit(tuple))
                            break;
                    }
                <else>
                    tuple = new Tuple_<keyType>_<valueType>_<valueType>();
                    tuple.set<WrappedTypeForTupleMap.(keyType)>(0, indKeyMap.get(i));
                    tuple.set<WrappedTypeForTupleMap.(valueType)>(1, valueList.get(i));
                    tuple.set<WrappedTypeForTupleMap.(deltaType)>(2, deltaList.get(i).get());
                    if(!queryVisitor.visit(tuple))
                        break;
                <endif>
            <else>
                tuple = new Tuple_<keyType>_<valueType>_<valueType>();
                tuple.set<WrappedTypeForTupleMap.(keyType)>(0, i + base);
                tuple.set<WrappedTypeForTupleMap.(valueType)>(1, valueList.get(i));
                tuple.set<WrappedTypeForTupleMap.(deltaType)>(2, deltaList.get(i).get());
                if(!queryVisitor.visit(tuple))
                    break;
            <endif>
	    }
	    queryVisitor.finish();
	}

    @Override
    public synchronized int getSize(){
        return size;
    }
}
>>