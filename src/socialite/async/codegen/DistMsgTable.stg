import "Utils.stg"

DistMsgTable(keyType, valueType, aggrType) ::= <<
package socialite.async.codegen;
<importForMsgTable()>
public class MessageTable {
    <! keyType should be int\long\key !>
    private Map\<<WrappedTypeMap.(keyType)>, <TypeAtomicMap.(valueType)>\> keyDeltaMap;
    private transient MyAtomicInteger updateCounter;

    private MessageTable(){
        //constructor for kryo
    }

    public MessageTable(int initSize) {
        updateCounter = new MyAtomicInteger(0);
        keyDeltaMap = new ConcurrentHashMap<>(initSize);
    }


    /**
     * 累积delta值
     *
     * @param key   全局索引
     * @param delta delta value
     */
    public void apply(<WrappedTypeMap.(keyType)> key, <valueType> delta) {
        <TypeAtomicMap.(valueType)> atomicDelta = keyDeltaMap.putIfAbsent(key, new <TypeAtomicMap.(valueType)>(delta));
        if (atomicDelta != null) {
            <if(IsSum.(aggrType)) )>
            atomicDelta.accumulateAndGet(delta, <WrappedTypeMap.(valueType)>::sum);
            <elseif(IsMax.(aggrType))>
            atomicDelta.accumulateAndGet(delta, <WrappedTypeMap.(valueType)>::max);
            <elseif(IsMin.(aggrType))>
            atomicDelta.accumulateAndGet(delta, <WrappedTypeMap.(valueType)>::min);
            <elseif(IsCount.(aggrType))>
            atomicDelta.accumulateAndGet(delta, <WrappedTypeMap.(valueType)>::sum);
            <endif>
        }
        updateCounter.addAndGet(1);
    }

    public int getUpdateTimes() {
        return updateCounter.intValue();
    }

    public void resetDelta() {
        keyDeltaMap.values().forEach(delta -> delta.set(DistAsyncTable.IDENTITY_ELEMENT));
        updateCounter.set(0);
    }

    public Map\<<WrappedTypeMap.(keyType)> key, <TypeAtomicMap.(valueType)>\> getKeyDeltaMap() {
        return keyDeltaMap;
    }
}
>>